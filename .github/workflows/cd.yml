name: Build and Deploy

on:
  push:
    branches: [deploy]
    paths-ignore:
      - "**.md"
      - ".github/workflows/ci.yml"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      frontend_version: ${{ steps.meta-frontend.outputs.version }}
      backend_version: ${{ steps.meta-backend.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Updated to use your existing GHCR_PAT
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Extract frontend metadata
        id: meta-frontend
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/smu/frontend
          tags: |
            type=sha,format=short
            type=ref,event=branch
          flavor: |
            latest=auto

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract backend metadata
        id: meta-backend
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/smu/backend
          tags: |
            type=sha,format=short
            type=ref,event=branch
          flavor: |
            latest=auto

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-canary:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Set up ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Install kubectl-argo-rollouts plugin
        run: |
          curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x ./kubectl-argo-rollouts-linux-amd64
          sudo mv ./kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

      # Updated to use your existing KUBE_CONFIG
      - name: Set up Kubernetes configuration
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

          # Validate config file structure
          echo "Validating kubeconfig..."
          kubectl config view || echo "Failed to validate kubeconfig"

          # Show current context
          echo "Current context:"
          kubectl config current-context || echo "Failed to get current context"

          # Test cluster connection
          echo "Testing cluster connection..."
          kubectl cluster-info || echo "Cluster connection failed"

          # Fetch and list nodes
          echo "Fetching nodes..."
          kubectl get nodes || echo "Failed to fetch nodes"
        shell: bash

      - name: Update image versions and start canary deployment
        run: |
          FRONTEND_VERSION=$(echo "${{ needs.build-and-push.outputs.frontend_version }}" | sed 's/.*://')
          BACKEND_VERSION=$(echo "${{ needs.build-and-push.outputs.backend_version }}" | sed 's/.*://')

          # Update image versions in Argo Rollouts manifests
          sed -i "s|ghcr.io/karan-wakade/smu/frontend:.*|ghcr.io/karan-wakade/smu/frontend:${FRONTEND_VERSION}|g" k8s/argo-rollouts/frontend-rollout.yaml
          sed -i "s|ghcr.io/karan-wakade/smu/backend:.*|ghcr.io/karan-wakade/smu/backend:${BACKEND_VERSION}|g" k8s/argo-rollouts/backend-rollout.yaml

          # Apply Argo Rollouts manifests
          kubectl apply -f k8s/base/namespace.yaml
          kubectl apply -f k8s/argo-rollouts/

          # Monitor rollout status
          kubectl argo rollouts get rollout smu-frontend -n smu-system --watch=false
          kubectl argo rollouts get rollout smu-backend -n smu-system --watch=false
